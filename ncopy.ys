#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# ID = 1500012898
# Name = Maosen Zhang
# use loop unrolling 8 times
# use mrmovl with valC to reduce the instructions updating src and dst
# use iaddl to reduce the number of instructions
# use the CC set by iaddl to reduce some "andl"s
# I tried using conditional-move instread of conditional-jump, but it didn't work well
#
#
# in the loop, move 2 elements together to reduce bubbles (data dependence)
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	irmovl $0,%eax		# count = 0;
	iaddl  $-7,%edx     #len-=7
	#andl %edx,%edx		# len <= 0?       #if init_len < 8
	jle Remaining		# if so, goto Remaining:

Loop:	
	mrmovl (%ebx), %esi	# read val from src...             #move 2 elements together to reduce bubbles
	mrmovl 4(%ebx), %edi # read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	rmmovl %edi, 4(%ecx) # ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle   Npos1
	iaddl $1, %eax		# count++
Npos1:
	andl %edi, %edi		# val > 0?
	jle   Npos2
	iaddl $1, %eax		# count++
Npos2:
	mrmovl 8(%ebx), %esi	# read val from src...
	mrmovl 12(%ebx), %edi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	rmmovl %edi, 12(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle   Npos3
	iaddl $1, %eax		# count++
Npos3:
	andl %edi, %edi		# val > 0?
	jle   Npos4
	iaddl $1, %eax		# count++
Npos4:
	mrmovl 16(%ebx), %esi	# read val from src...
	mrmovl 20(%ebx), %edi	# read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	rmmovl %edi, 20(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle   Npos5
	iaddl $1, %eax		# count++
Npos5:
	andl %edi, %edi		# val > 0?
	jle   Npos6
	iaddl $1, %eax		# count++
Npos6:
	mrmovl 24(%ebx), %esi	# read val from src...
	mrmovl 28(%ebx), %edi	# read val from src...
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	rmmovl %edi, 28(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle   Npos7
	iaddl $1, %eax		# count++
Npos7:
	andl %edi, %edi		# val > 0?
	jle   Npos8
	iaddl $1, %eax		# count++
Npos8:
	iaddl $32, %ebx		# src+=8(*4)
	iaddl $32, %ecx		# dst+=8(*4)
	iaddl $-8, %edx		# len-=8
	#andl %edx,%edx		# len > 0?
	jg Loop			# if so, goto Loop:

Remaining:                                        #deal with remaining elements
	iaddl  $7, %edx     #len+=7                   #restore the init_len
	#andl   %edx, %edx   #if len<=0
	jle Done            #if so go to Done

	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle  Npos9
	iaddl $1, %eax		# count++
Npos9:
	iaddl $-1, %edx		# len--
	#andl %edx, %edx     #len>0
	jle  Done

	mrmovl 4(%ebx), %esi	# read val from src...
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle  Npos10
	iaddl $1, %eax		# count++
Npos10:
	iaddl $-1, %edx		# len--
	#andl %edx, %edx     #len>0
	jle  Done

	mrmovl 8(%ebx), %esi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle  Npos11
	iaddl $1, %eax		# count++
Npos11:
	iaddl $-1, %edx		# len--
	#andl %edx, %edx     #len>0
	jle  Done

	mrmovl 12(%ebx), %esi	# read val from src...
	rmmovl %esi, 12(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle  Npos12
	iaddl $1, %eax		# count++
Npos12:
	iaddl $-1, %edx		# len--
	#andl %edx, %edx     #len>0
	jle  Done

	mrmovl 16(%ebx), %esi	# read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle  Npos13
	iaddl $1, %eax		# count++
Npos13:
	iaddl $-1, %edx		# len--
	#andl %edx, %edx     #len>0
	jle  Done

	mrmovl 20(%ebx), %esi	# read val from src...
	rmmovl %esi, 20(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle  Npos14
	iaddl $1, %eax		# count++
	
Npos14:
	iaddl $-1, %edx		# len--
	#andl %edx, %edx     #len>0
	jle  Done
	mrmovl 24(%ebx), %esi	# read val from src...
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jle  Done
	iaddl $1, %eax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
